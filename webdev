#!/bin/bash

export USER_ID=$(id -u)
export GROUP_ID=$(id -g)
export CURRENT_UID=${USER_ID}:${GROUP_ID}

DOCKER="docker"
COMPOSE="docker-compose"
EXEC="${COMPOSE} exec webdev-php"
ME="$0"

if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BLINK="$(tput blink)"
        BOLD="$(tput bold)"
        RED="$(tput setaf 1)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        BLUE="$(tput setaf 4)"
        NC="$(tput sgr0)"
    fi
fi

command -v $DOCKER >/dev/null
ret=$?
if [ ! "$ret" == "0" ]; then
    echo
    echo "${BOLD}${BLINK}${RED}ERROR${NC}"
    echo "Command ${YELLOW}${DOCKER}${NC} is missing. Please install it to use this script."
    echo
    exit 1
fi

command -v $COMPOSE >/dev/null
ret=$?
if [ ! "$ret" == "0" ]; then
    echo
    echo "${BOLD}${BLINK}${RED}ERROR${NC}"
    echo "Command ${YELLOW}${COMPOSE}${NC} is missing. Please install it to use this script."
    echo
    exit 1
fi

docker buildx version >/dev/null 2>/dev/null
ret=$?
if [ ! "$ret" == "0" ]; then
    echo
    echo "${BOLD}${BLINK}${YELLOW}ERROR${NC}"
    echo "${YELLOW}buildx${NC} is missing but highly recommended."
    echo
    echo -n "Do you want to continue without buildx? [y/n] "
    read -n 1 YN
    echo
    if [ ! "$YN" == "y" ] && [ ! "$YN" == "Y" ]; then
        exit 0
    fi
fi


# Renders a text based list of options that can be selected by the
# user using up, down and enter keys and returns the chosen option.
#
#   Arguments   : list of options, maximum of 256
#                 "opt1" "opt2" ...
#   Return value: selected index (0 for opt1, 1 for opt2 ...)
function select_option {

    # little helpers for terminal print control and key input
    ESC=$(printf "\e")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        {
        read -s -n3 key 2>/dev/null >&2
        if [ "$key" == "$ESC[A" ]; then echo up; fi
        if [ "$key" == "$ESC[B" ]; then echo down; fi
        if [ "$key" == "" ]; then echo enter; fi;
    }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

function display_help {
    echo "${YELLOW}Usage${NC}"
    echo "  ${ME} COMMAND [arguments]"
    echo
    echo "Unknown commands are passed to the docker-compose binary."
    echo
    echo "${YELLOW}Standard commands${NC}"
    echo "  ${RED}u${GREEN}p${NC}                      Start the development containers"
    echo "  ${RED}d${GREEN}own${NC}                    Stop the development servers"
    echo "  ${RED}s${GREEN}hell${NC}                   Enter a shell in the container"
    echo "  ${RED}e${GREEN}xecute${NC} [command]       Execute any command in container"
    echo "  ${RED}c${GREEN}omposer${NC} [command]      Run a composer command"
    echo "  ${RED}n${GREEN}pm${NC} [command]           Run a npm command"
    echo "  ${RED}o${GREEN}pen${NC}                    Open in browser"
    echo "  ${RED}f${GREEN}ormat${NC} [--test] [file]  Format code with PHP CS Fixer"
    echo "  ${RED}i${GREEN}nstall${NC}                 Install framework"
    echo "  ${RED}p${GREEN}hp${NC}                     Change PHP version"
    echo "  ${RED}m${GREEN}ysql${NC}                   Change MySQL type"
    echo "  ${GREEN}remove${NC}                  Remove webdev stuff from this project"
    echo "  ${GREEN}cleanup${NC}                 Clean up all docker files globally"
    echo
    echo "${YELLOW}Special Laravel commands${NC}"
    echo "  ${RED}r${GREEN}un${NC}                     Start Laravel in development mode"
    echo "  ${RED}b${GREEN}uild${NC}                   Build Laravel files for production"
    echo "  ${RED}a${GREEN}rtisan${NC} [command]       Run an artisan command"
    echo "  ${RED}t${GREEN}est${NC}                    Run laravel tests"
    echo "  ${GREEN}ro${NC}                      ${BLUE}= run + open${NC}"
    echo "  ${GREEN}bo${NC}                      ${BLUE}= build + open${NC}"
    echo
    echo "${YELLOW}Special reveal.js commands${NC}"
    echo "  ${RED}b${GREEN}uild${NC}                   Build reveal.js (plugins / css)"
    echo "  ${GREEN}e${RED}x${GREEN}port${NC}                  Compress relevant files to ZIP"
    echo "  ${GREEN}bo${NC}                      ${BLUE}= build + open${NC}"
    echo
    exit
}

function start_if_down {
    ID=$(${COMPOSE} ps -q webdev-php)
    if [ -z "${ID}" ]; then
        $0 up
        if [ "$?" == "1" ]; then
            exit 1
        fi
    fi
}

function stop_if_up {
    ID=$(${DOCKER} ps -a -f name=webdev- -q)
    if [ -n "${ID}" ]; then
        $0 down
        return
    fi
}


function write_skeleton_index {
    mkdir -p ./public
    cat <<EOF >./public/index.php
<?php
phpinfo();
EOF
}

function add_line_if_missing() { # file text
    if [ ! -f "$1" ]; then
        touch "$1"
    fi
    sed -i -e '$a\' "$1" # add new line at end of file
    grep -qxF "$2" "$1" || echo "$2" >> "$1"
}

function write_gitignore_file {
    add_line_if_missing .gitignore "/.docker"
    add_line_if_missing .gitignore "/docker-compose.yml"
    add_line_if_missing .gitignore "/.vscode"
    add_line_if_missing .gitignore "/.php-cs-fixer.cache"
    add_line_if_missing .gitignore "/vendor"
    add_line_if_missing .gitignore "/node_modules"
}

function get_php_version {
    mkdir -p ./.docker/php
    if [ ! -f ./.docker/php/version ]; then
        echo "${GREEN}Select PHP version you want to use:${NC}"
        options=("8.3" "8.2" "8.1" "8.0" "7.4" "7.3" "7.2" "7.1" "5.6")
        select_option "${options[@]}"
        option=${options[$?]}
        echo $option > ./.docker/php/version
    fi
    PHP_VERSION=$(cat ./.docker/php/version)
    PHP_MAIN_VERSION=$(echo "${PHP_VERSION:0:1}")
}

function get_mysql_version {
    mkdir -p ./.docker/mysqldata
    if [ ! -f ./.docker/mysql ]; then
        echo "${GREEN}Select MySQL type you want to use:${NC}"
        options=("Persistent" "Temporary" "None")
        select_option "${options[@]}"
        option=${options[$?]}
        echo $option > ./.docker/mysql
    fi
    MYSQL_VERSION=$(cat ./.docker/mysql)
}

function get_webdir {
    FRAMEWORK=
    if [ -f ./.docker/framework ]; then
        FRAMEWORK=$(cat ./.docker/framework)
    fi
    if [ "${FRAMEWORK}" == "custom" ]; then
        DIR_WEBROOT=
    else
        DIR_WEBROOT=public
    fi
    if [ -d ./html ]; then
        DIR_WEBROOT=html
    fi
    if [ -d ./htdocs ]; then
        DIR_WEBROOT=htdocs
    fi
    if [ -d ./webroot ]; then
        DIR_WEBROOT=webroot
    fi
    if [ -d ./wwwroot ]; then
        DIR_WEBROOT=wwwroot
    fi
    if [ -d ./public ]; then
        DIR_WEBROOT=public
    fi
}

function remove_docker_images {
    IMAGES=$(docker images | grep $1 | sed -r -e 's!\s+!:!g' | cut -d ':' -f 1-2)
    for i in $IMAGES
    do
        $DOCKER rmi $i
    done
}

function laravel_set_database {
    FRAMEWORK=$(cat ./.docker/framework)
    if [ ! "$FRAMEWORK" == "laravel" ]; then
        return
    fi
    get_mysql_version
    if [ "$MYSQL_VERSION" == "Persistent" ] || [ "$MYSQL_VERSION" == "Temporary" ]; then
        ${EXEC} sed -i 's/[# ]*DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
        ${EXEC} sed -i 's/[# ]*DB_HOST=.*/DB_HOST=webdev-mysql/' .env
        ${EXEC} sed -i 's/[# ]*DB_PORT=.*/DB_PORT=3306/' .env
        ${EXEC} sed -i 's/[# ]*DB_DATABASE=.*/DB_DATABASE=dev/' .env
        ${EXEC} sed -i 's/[# ]*DB_USERNAME=.*/DB_USERNAME=dev/' .env
        ${EXEC} sed -i 's/[# ]*DB_PASSWORD=.*/DB_PASSWORD=dev/' .env
    else
        ${EXEC} sed -i 's/[# ]*DB_CONNECTION=.*/DB_CONNECTION=sqlite/' .env
        ${EXEC} sed -i 's/[# ]*DB_HOST=/# DB_HOST=/' .env
        ${EXEC} sed -i 's/[# ]*DB_PORT=/# DB_PORT=/' .env
        ${EXEC} sed -i 's/[# ]*DB_DATABASE=/# DB_DATABASE=/' .env
        ${EXEC} sed -i 's/[# ]*DB_USERNAME=/# DB_USERNAME=/' .env
        ${EXEC} sed -i 's/[# ]*DB_PASSWORD=/# DB_PASSWORD=/' .env
        if [ ! -f ./database/database.sqlite ]; then
            ${EXEC} php artisan migrate
        fi
    fi
}

function write_docker_compose {
    get_php_version
    get_mysql_version
    get_webdir
    if [ "${DIR_WEBROOT}" == "" ]; then
        if [ ! -f ./.htaccess ]; then
            echo "Options Indexes" > ./.htaccess
        fi
    fi
    cat <<EOF >./docker-compose.yml

# Services
services:
  #Apache Service with PHP
  webdev-php:
    container_name: webdev-php
    image: local.php-${PHP_VERSION}
    build: ./.docker/php
    pull_policy: never
    restart: "no"
    user: \${CURRENT_UID:-1000:1000}
    environment:
      - XDEBUG_MODE=develop,debug
      - XDEBUG_CONFIG=client_host=host.docker.internal client_port=9003 discover_client_host=true client.remote_host=host.docker.internal remote_port=9003 remote_enable=1
      - APACHE_DOCUMENT_ROOT=/var/www/html/${DIR_WEBROOT}
      - PHP_CS_FIXER_ALLOW_XDEBUG=true
    ports:
      - 80:80
      - 8080:8080
      - 81:81
      - 443:443
      - 5173:5173
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
EOF
    if [ "$MYSQL_VERSION" == "Persistent" ] || [ "$MYSQL_VERSION" == "Temporary" ]; then
        cat <<EOF >>./docker-compose.yml
    depends_on:
      - webdev-mysql
EOF
    fi
    cat <<EOF >>./docker-compose.yml
    networks:
      - webdev
    extra_hosts:
      - host.docker.internal:host-gateway

  webdev-mailhog:
    container_name: webdev-mailhog
    image: mailhog/mailhog
    restart: "no"
    ports:
      - 8025:8025
    networks:
      - webdev

EOF
    if [ "$MYSQL_VERSION" == "Persistent" ] || [ "$MYSQL_VERSION" == "Temporary" ]; then
        cat <<EOF >>./docker-compose.yml
  webdev-mysql:
    container_name: webdev-mysql
    image: mariadb
    restart: "no"
    ports:
      - 3306:3306
    environment:
      - MARIADB_RANDOM_ROOT_PASSWORD=yes
      - MARIADB_DATABASE=dev
      - MARIADB_USER=dev
      - MARIADB_PASSWORD=dev
EOF
        if [ "$MYSQL_VERSION" == "Persistent" ]; then
            cat <<EOF >>./docker-compose.yml
    user: \${CURRENT_UID:-1000:1000}
    volumes:
      - ./.docker/mysqldata:/var/lib/mysql
EOF
        fi
        cat <<EOF >>./docker-compose.yml
    networks:
      - webdev

EOF
    fi
    cat <<EOF >>./docker-compose.yml
networks:
  webdev:
    driver: bridge
EOF
}

function write_docker_file_php {
    get_php_version
    mkdir -p ./.docker/php

    if [ "${PHP_MAIN_VERSION}" == "8" ]; then
        XDEBUG=xdebug
    fi

    if [ "${PHP_MAIN_VERSION}" == "7" ]; then
        XDEBUG=xdebug-2.9.2
    fi

    cat <<EOF > ./.docker/php/Dockerfile
FROM php:${PHP_VERSION}-apache

WORKDIR /tmp
RUN groupadd -g \${USER_ID:-1000} dev && \
useradd -g dev -u \${GROUP_ID:-1000} dev && \
mkdir /home/dev && \
chown dev:dev /home/dev
EOF

    if [ "${PHP_MAIN_VERSION}" == "5" ]; then
    cat <<EOF >> ./.docker/php/Dockerfile
RUN sed -i '/stretch-updates/d' /etc/apt/sources.list && sed -i 's/deb.debian.org/archive.debian.org/' /etc/apt/sources.list && sed -i 's/security.debian.org/archive.debian.org/' /etc/apt/sources.list
EOF
    fi

    if [ "${PHP_MAIN_VERSION}" == "7" ] || [ "${PHP_MAIN_VERSION}" == "8" ]; then
    cat <<EOF >> ./.docker/php/Dockerfile
RUN apt-get update && apt-get install -y gnupg && \
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \
echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
EOF
    fi

    cat <<EOF >> ./.docker/php/Dockerfile
RUN apt-get update && \
apt-get install -y nano dialog ssl-cert libzip-dev zip unzip zlib1g-dev libpng-dev libgd3 libgd-dev libfreetype6-dev golang git
EOF
    if [ "${PHP_MAIN_VERSION}" == "8" ]; then
    cat <<EOF >> ./.docker/php/Dockerfile
RUN GOPATH=/usr go install github.com/mailhog/mhsendmail@latest
EOF
    else
    cat <<EOF >> ./.docker/php/Dockerfile
RUN GOPATH=/usr go get github.com/mailhog/mhsendmail
EOF
    fi
    if [ "${PHP_MAIN_VERSION}" == "7" ] || [ "${PHP_MAIN_VERSION}" == "8" ]; then
    cat <<EOF >> ./.docker/php/Dockerfile
RUN apt-get install -y nodejs npm gulp libonig-dev
EOF
    fi

    if [ "${PHP_MAIN_VERSION}" == "5" ]; then
    cat <<EOF >> ./.docker/php/Dockerfile
RUN apt-get install -y git
EOF
    fi

    cat <<EOF >> ./.docker/php/Dockerfile
RUN php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
php composer-setup.php && \
php -r "unlink('composer-setup.php');" && \
mv composer.phar /usr/local/bin/composer
RUN docker-php-ext-install zip
EOF
    if [ "${PHP_MAIN_VERSION}" == "8" ] || [ "${PHP_MAIN_VERSION}" == "7" ]; then
    cat <<EOF >> ./.docker/php/Dockerfile
RUN docker-php-ext-configure gd --with-freetype --with-jpeg && docker-php-ext-install gd
EOF
else
    cat <<EOF >> ./.docker/php/Dockerfile
RUN docker-php-ext-configure gd --with-freetype-dir --with-jpeg-dir && docker-php-ext-install gd
EOF
    fi
    cat <<EOF >> ./.docker/php/Dockerfile
RUN docker-php-ext-install iconv
RUN docker-php-ext-install mbstring
RUN docker-php-ext-install mysqli && docker-php-ext-install pdo_mysql
RUN docker-php-ext-install pcntl && docker-php-ext-configure pcntl --enable-pcntl
EOF

    if [ "${PHP_MAIN_VERSION}" == "5" ]; then
    cat <<EOF >> ./.docker/php/Dockerfile
RUN docker-php-ext-install mysql
EOF
    fi

    if [ "${PHP_MAIN_VERSION}" == "7" ] || [ "${PHP_MAIN_VERSION}" == "8" ]; then
    cat <<EOF >> ./.docker/php/Dockerfile
RUN pecl install ${XDEBUG} && \
docker-php-ext-enable xdebug
EOF
    fi

    cat <<EOF >> ./.docker/php/Dockerfile
RUN make-ssl-cert generate-default-snakeoil && \
chmod 755 /etc/ssl/private && \
chmod 644 /etc/ssl/private/* && \
a2enmod rewrite && \
a2enmod ssl && \
a2ensite default-ssl && \
echo Listen 81 >> /etc/apache2/ports.conf && \
echo "<VirtualHost *:81>\nDocumentRoot /var/www/adminer/\n</VirtualHost>" > /etc/apache2/sites-available/001-adminer.conf && \
a2ensite 001-adminer
ENV APACHE_RUN_USER=dev
ENV APACHE_RUN_GROUP=dev
ENV APACHE_LOG_DIR=/var/www/html/.docker/apache
RUN echo root:root | chpasswd
WORKDIR /etc/apache2/sites-available/
RUN sed -ri -e 's!/var/www/html!\${APACHE_DOCUMENT_ROOT}!g' *.conf
WORKDIR /usr/local/etc/php/
RUN echo '[PHP]' > php.ini && \
echo 'error_log = /var/www/html/.docker/php/error.log' >> php.ini && \
echo 'post_max_size = 1024M' >> php.ini && \
echo 'upload_max_filesize = 256M' >> php.ini && \
echo 'date.timezone = "UTC"' >> php.ini && \
echo 'sendmail_path = "/usr/bin/mhsendmail --smtp-addr=webdev-mailhog:1025"' >> php.ini
USER dev:dev
WORKDIR /var/www/adminer
RUN curl https://github.com/vrana/adminer/releases/download/v5.0.6/adminer-5.0.6.php -L -o adminer.php && \
curl https://raw.github.com/vrana/adminer/v5.0.6/plugins/plugin.php -L -o plugin.php && \
echo "<?php\nuse function Adminer\\get_nonce;\nclass WebdevNoDatabase{function loginForm(){echo '<h1>This environment has no database!</h1>';return true;}}class WebdevMySQL{function loginForm(){echo '<input type=\\"hidden\\" name=\\"auth[driver]\\" value=\\"server\\"><input type=\\"hidden\\" name=\\"auth[server]\\" value=\\"webdev-mysql\\"><input type=\\"hidden\\" name=\\"auth[username]\\" value=\\"dev\\"><input type=\\"hidden\\" name=\\"auth[password]\\" value=\\"dev\\"><input type=\\"hidden\\" name=\\"auth[db]\\" value=\\"dev\\"><input style=\\"display: none;\\" type=\\"submit\\" id=\\"webdev-autologin\\"><script nonce=\\"'.get_nonce().'\\">window.setTimeout(function(){document.getElementById(\\"webdev-autologin\\").click();},1000);</script>';return true;}}class WebdevSQLite{function loginForm(){echo '<input type=\\"hidden\\" name=\\"auth[driver]\\" value=\\"sqlite\\"><input type=\\"hidden\\" name=\\"auth[db]\\" value=\\"../html/database/database.sqlite\\"><input style=\\"display: none;\\" type=\\"submit\\" id=\\"webdev-autologin\\"><script nonce=\\"'.get_nonce().'\\">window.setTimeout(function(){document.getElementById(\\"webdev-autologin\\").click();},1000);</script>';return true;}function login(\\\$login,\\\$password){return true;}}function adminer_object(){include_once './plugin.php';if(file_exists('../html/.docker/mysql')&&trim(file_get_contents('../html/.docker/mysql'))!='None')return new AdminerPlugin([new WebdevMySQL]);if(file_exists('../html/database/database.sqlite'))return new AdminerPlugin([new WebdevSQLite]);return new AdminerPlugin([new WebdevNoDatabase]);}include_once './adminer.php';" > index.php
WORKDIR /home/dev
RUN echo PATH=\\\$PATH:\$(composer config --global home)/\$(composer config --global bin-dir) > .bashrc && \
echo export PATH >> .bashrc
WORKDIR /var/www/html
EOF
}

function write_vscode_files {
    mkdir -p ./.vscode
    cat <<EOF > ./.vscode/launch.json
{
    "_comment": "This file was generated by $0",
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Listen for Xdebug",
            "type": "php",
            "request": "launch",
            "port": 9003,
            "pathMappings": {
                "/var/www/html": "\${workspaceFolder}"
            },
        }
    ]
}
EOF

}

function write_phpcsfixer_file {
    if [ -f ./.php-cs-fixer.dist.php ]; then
        return
    fi

    echo "${YELLOW}+--------------------------------------------------------+${NC}"
    echo "${YELLOW}|${NC}                 SuperIndentationFixer                  ${YELLOW}|${NC}"
    echo "${YELLOW}|${NC}                 =====================                  ${YELLOW}|${NC}"
    echo "${YELLOW}|${NC}                                                        ${YELLOW}|${NC}"
    echo "${YELLOW}|${NC} SuperIndentationFixer changes tabs to space in strings ${YELLOW}|${NC}"
    echo "${YELLOW}|${NC} at beginning of lines for multiline strings. This is   ${YELLOW}|${NC}"
    echo "${YELLOW}|${NC} a special function for very old projects. For newer    ${YELLOW}|${NC}"
    echo "${YELLOW}|${NC} projects it may corrupt files.                         ${YELLOW}|${NC}"
    echo "${YELLOW}+--------------------------------------------------------+${NC}"
    echo
    echo -n "Do you want to use \"SuperIndentationFixer\"? [y/n] "
    read -n 1 YN
    echo
    if [ "$YN" == "y" ] || [ "$YN" == "Y" ]; then
    cat <<EOF > ./.php-cs-fixer.dist.php
<?php

use PhpCsFixer\AbstractFixer;
use PhpCsFixer\Config;
use PhpCsFixer\Finder;
use PhpCsFixer\FixerDefinition\CodeSample;
use PhpCsFixer\FixerDefinition\FixerDefinition;
use PhpCsFixer\FixerDefinition\FixerDefinitionInterface;
use PhpCsFixer\Runner\Parallel\ParallelConfigFactory;
use PhpCsFixer\Tokenizer\Token;
use PhpCsFixer\Tokenizer\Tokens;

class SuperIndentationFixer extends AbstractFixer
{
    public function isCandidate(Tokens \$tokens): bool
    {
        foreach(\$tokens as \$token) {
            if(\$token->isGivenKind(T_CONSTANT_ENCAPSED_STRING)) {
                if(strpos(\$token->getContent(), "\t") !== false) {
                    return true;
                }
            }
        }

        return false;
    }

    public function applyFix(SplFileInfo \$file, Tokens \$tokens): void
    {
        foreach(\$tokens as \$pos => \$token) {
            if(\$token->isGivenKind(T_CONSTANT_ENCAPSED_STRING)) {
                \$content = \$token->getContent();
                if(strpos(\$content, "\t") !== false) {
                    \$lines = explode("\n", \$content);
                    foreach(\$lines as \$row => \$line) {
                        \$lines[\$row] = preg_replace_callback('/^\s+/', function (\$e) {
                            return str_replace("\t", '    ', \$e[0]);
                        }, \$line);
                    }
                    \$content = implode("\n", \$lines);
                    \$tokens[\$pos] = new Token([T_CONSTANT_ENCAPSED_STRING, \$content]);
                }
            }
        }
    }

    public function getDefinition(): FixerDefinitionInterface
    {
        return new FixerDefinition('Fixes Tabs on line beginnings in strings', [new CodeSample('no sample')]);
    }

    public function getPriority(): int
    {
        return -999;
    }

    public function getName(): string
    {
        return 'SuperIndentationFixer/tabtospace';
    }
}

return (new Config())
    ->setParallelConfig(ParallelConfigFactory::detect())
    ->registerCustomFixers([
        new SuperIndentationFixer(),
    ])
    ->setRules([
        '@PSR12' => true,
        '@PhpCsFixer' => true,
        'yoda_style' => ['equal' => false, 'identical' => false, 'less_and_greater' => false],
        'concat_space' => ['spacing' => 'one'],
        'increment_style' => false,
        'semicolon_after_instruction' => false,
        'indentation_type' => true,
        'single_space_around_construct' => false,
        'line_ending' => true,
        'echo_tag_syntax' => ['format' => 'short', 'long_function' => 'print'],
        'no_mixed_echo_print' => ['use' => 'print'],
        'SuperIndentationFixer/tabtospace' => true,
    ])
    ->setIndent('    ')
    ->setLineEnding("\n")
    ->setFinder((new Finder())->in(__DIR__))
;
EOF
    else
    cat <<EOF > ./.php-cs-fixer.dist.php
<?php

use PhpCsFixer\Config;
use PhpCsFixer\Finder;
use PhpCsFixer\Runner\Parallel\ParallelConfigFactory;

return (new Config())
    ->setParallelConfig(ParallelConfigFactory::detect())
    ->setRules([
        '@PSR12' => true,
        '@PhpCsFixer' => true,
        'yoda_style' => ['equal' => false, 'identical' => false, 'less_and_greater' => false],
        'concat_space' => ['spacing' => 'one'],
        'increment_style' => false,
        'semicolon_after_instruction' => false,
        'indentation_type' => true,
        'single_space_around_construct' => false,
        'line_ending' => true,
        'echo_tag_syntax' => ['format' => 'short', 'long_function' => 'print'],
        'no_mixed_echo_print' => ['use' => 'print'],
    ])
    ->setIndent('    ')
    ->setLineEnding("\n")
    ->setFinder((new Finder())->in(__DIR__))
;
EOF
    fi
}

function write_github_action_file {
    if [ -f ./.docker/githubaction ]; then
        return
    fi

    if [ ! -d ./.git ]; then
        return
    fi

    if [ -f ./.github/workflows/php-cs-fixer.yml ]; then
        return
    fi

    echo -n "Do you want to add an automatic formatting script for GitHub? [y/n] "
    read -n 1 YN
    echo
    if [ "$YN" == "y" ] || [ "$YN" == "Y" ]; then
        write_phpcsfixer_file
        mkdir -p ./.github/workflows
        GITBRANCH=$(git branch --show-current)
        cat <<EOF > ./.github/workflows/php-cs-fixer.yml
name: Check & fix styling

on:
  push:
    branches: [$GITBRANCH]
  pull_request:
    branches: [$GITBRANCH]

jobs:
  php-cs-fixer:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: \${{ github.head_ref }}

      - name: Run PHP CS Fixer
        uses: docker://oskarstark/php-cs-fixer-ga
        with:
          args: --config=.php-cs-fixer.dist.php --allow-risky=yes

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Fix styling
EOF
    fi
    mkdir -p ./.docker
    touch ./.docker/githubaction
}

function init_git_repo {
    if [ -f ./.docker/gituse ]; then
        return
    fi

    if [ -d ./.git ]; then
        return
    fi

    echo -n "Do you want to use GIT for this project? [y/n] "
    read -n 1 YN
    echo
    if [ "$YN" == "y" ] || [ "$YN" == "Y" ]; then
        options=("Create a new local repository" "Check out existing repository")
        select_option "${options[@]}"
        GIT=$?
        if [ "$GIT" == "0" ]; then
            git init
        fi
        if [ "$GIT" == "1" ]; then
            echo -n "Enter path of repository: "
            read REPO
            git clone "$REPO" git_temp
            if [ ! -d git_temp ]; then
                stop_if_up
                echo "${RED}Checkout failed. Try again or use a new repository.${NC}"
                exit 1
            fi
            move_to_owner git_temp
        fi
    fi
    mkdir -p ./.docker
    touch ./.docker/gituse
}

function move_to_owner {
    if [ ! -d "$1" ]; then
        return
    fi
    cd "$1"
    if [ "$2" == "git" ]; then
        find -mindepth 1 -maxdepth 1 ! -name .git -exec cp -r -f {} ../ \;
    else
        find -mindepth 1 -maxdepth 1 -exec cp -r -f {} ../ \;
    fi
    cd ..
    rm -rf "$1"

}

function confirm {
    echo "${YELLOW}All files will be deleted!${NC}"
    echo -n "Are you sure to continue? [y/n] "
    read -n 1 YN
    echo
    if [ "$YN" == "y" ] || [ "$YN" == "Y" ]; then
        return
    fi
    exit
}

function get_webdev_dir {
    START_DIR=$(pwd)
    while [ ! "$(pwd)" == "/" ]; do
        if [ -f ./.docker/framework ]; then
            WEBDEV_DIR=$(pwd)
            cd "$START_DIR"
            return
        fi
        cd ..
    done
    WEBDEV_DIR=$START_DIR
    cd "$START_DIR"
}

function goto {
    if [ ! "$(pwd)" == "$1" ]; then
        echo "${RED}Web development folder detected!${NC}"
        echo "${YELLOW}You are here: ${NC}$(pwd)"
        echo "${YELLOW}Web development here: ${NC}$1"
        echo -n "${GREEN}Do you want to change? [y/n] "
        read -n 1 YN
        echo
        if [ "$YN" == 'y' ] || [ "$YN" == 'Y' ]; then
            cd $1
            echo "${YELLOW}You are now here: ${NC}$(pwd)"
        fi
    fi
}

if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

cmd=$1
shift 1

get_webdev_dir
goto "$WEBDEV_DIR"

if [ "$cmd" == "up" ] || [ "$cmd" == "u" ]; then
    stop_if_up
    if [ ! -f ./.docker/framework ]; then
        CURPATH=$(pwd)
        if [ -n "$(ls -A $CURPATH)" ]; then
            echo "${RED}ATTENTION!${NC}"
            echo "This folder was not used for web development yet and is not empty."
            echo -n "Do you want to continue using this folder? [y/n] "
            read -n 1 YN
            echo
            if [ ! "$YN" == "y" ] && [ ! "$YN" == "Y" ]; then
                exit 1
            fi
        fi
    fi

    init_git_repo

    echo "${YELLOW}Starting webdev containers...${NC}"
    write_docker_compose
    write_docker_file_php
    write_vscode_files
    write_gitignore_file
    export COMPOSE_BAKE=true
    ${COMPOSE} up -d --remove-orphans --build $@
    echo "${GREEN}Started${NC}"
    if [ ! -f ./.docker/framework ]; then
        # try to detect existing framework
        if [ -f ./artisan ]; then
            echo "${YELLOW}Laravel detected${NC}"
            echo -n "Do you want to use this Laravel installation? [y/n] "
            read -n 1 YN
            echo
            if [ "$YN" == 'y' ] || [ "$YN" == 'Y' ]; then
                if [ ! -f .env ]; then
                    cp .env.example .env
                fi
                ${EXEC} sed -i 's/MAIL_HOST=.*/MAIL_HOST=webdev-mailhog/' .env
                ${EXEC} sed -i 's/MAIL_PORT=.*/MAIL_PORT=1025/' .env
                ${EXEC} sed -i 's/MAIL_USERNAME=.*/MAIL_USERNAME=null/' .env
                ${EXEC} sed -i 's/MAIL_PASSWORD=.*/MAIL_PASSWORD=null/' .env
                ${EXEC} sed -i 's/MAIL_ENCRYPTION=.*/MAIL_ENCRYPTION=null/' .env
                echo laravel > ./.docker/framework
                exit 0
            fi
        elif [ -f ./public/wp-config.php ]; then
            echo "${YELLOW}Wordpress detected${NC}"
            echo -n "Do you want to use this Wordpress installation? [y/n] "
            read -n 1 YN
            echo
            if [ "$YN" == 'y' ] || [ "$YN" == 'Y' ]; then
                echo wordpress > ./.docker/framework
                exit 0
            fi
        elif [ -f ./js/reveal.js ]; then
            echo "${YELLOW}reveal.js detected${NC}"
            echo -n "Do you want to this reveal.js presentation? [y/n] "
            read -n 1 YN
            echo
            if [ "$YN" == 'y' ] || [ "$YN" == 'Y' ]; then
                echo reveal.js > ./.docker/framework
                exit 0
            fi
        elif [ -f ./public/index.php ]; then
            echo "${YELLOW}Custom webpage detected${NC}"
            echo -n "Do you want to keep this webpage? [y/n] "
            read -n 1 YN
            echo
            if [ "$YN" == 'y' ] || [ "$YN" == 'Y' ]; then
                echo custom > ./.docker/framework
                exit 0
            fi
        fi
        $0 install
    fi
    write_github_action_file
    FRAMEWORK=$(cat ./.docker/framework)
    if [ "$FRAMEWORK" == "laravel" ]; then
        laravel_set_database
        if [ "$MYSQL_VERSION" == "Temporary" ]; then
            echo "${YELLOW}Creating temporary database...${NC}"
            sleep 30
            ${EXEC} php artisan migrate
        fi
    fi
elif [ "$cmd" == "down" ] || [ "$cmd" == "d" ]; then
    echo "${YELLOW}Stopping webdev containers...${NC}"
    if [ -f ./docker-compose.yml ]; then
        ${COMPOSE} down
        ${COMPOSE} rm -f
    fi
    IDS=$(${DOCKER} ps -a -f name=webdev- -q)
    for ID in $IDS; do
        ${DOCKER} container stop $ID
        ${DOCKER} container rm $ID
    done
    ${DOCKER} network prune -f
    echo "${GREEN}Stopped${NC}"
elif [ "$cmd" == "shell" ] || [ "$cmd" == "s" ]; then
    start_if_down
    ${EXEC} bash
elif [ "$cmd" == "artisan" ] || [ "$cmd" == "a" ]; then
    if [ ! -f ./artisan ]; then
        echo "${RED}No framework with artisan installed!${NC}"
        exit 1
    fi
    start_if_down
    ${EXEC} php -dxdebug.mode=debug -dxdebug.start_with_request=yes -dxdebug.client_host=host.docker.internal -dxdebug.client_port=9003 artisan "$@"
elif [ "$cmd" == "npm" ] || [ "$cmd" == "n" ]; then
    get_php_version
    if [ "${PHP_MAIN_VERSION}" == "5" ]; then
        echo "${RED}No node.js on PHP 5 installation!${NC}"
        exit 1
    fi
    start_if_down
    ${EXEC} npm "$@"
elif [ "$cmd" == "composer" ] || [ "$cmd" == "c" ]; then
    start_if_down
    ${EXEC} composer "$@"
elif [ "$cmd" == "execute" ] || [ "$cmd" == "e" ]; then
    start_if_down
    ${EXEC} "$@"
elif [ "$cmd" == "open" ] || [ "$cmd" == "o" ]; then
    start_if_down
    if [ -z "$(command -v xdg-open)" ]; then
        echo
        echo "${YELLOW}WARNING!${NC}"
        echo "It seems that the URLs will not be opened on this machine."
        echo "Maybe you are using a virtual machine?"
        echo "Please open the URLs manually:"
        echo "   http://localhost           Main page"
        echo "   http://localhost:81        AdminerEvo"
        echo "   http://localhost:8025      MailHog"
        echo
        echo "If accessing from another machine replace localhost with"
        echo "the IP address which may be one of these:"
        ip addr show | grep 'inet ' | awk '{print $2}' | cut -d '/' -f 1
        exit
    fi
    FRAMEWORK=$(cat ./.docker/framework)
    if [ "$FRAMEWORK" == "laravel" ]; then
        xdg-open http://localhost:81 2>/dev/null >/dev/null
        sleep 5
    fi
    if [ "$FRAMEWORK" == "laravel" ] || [ "$FRAMEWORK" == "wordpress" ]; then
        xdg-open http://localhost:8025 2>/dev/null >/dev/null
        sleep 5
    fi
    xdg-open http://localhost 2>/dev/null >/dev/null
elif [ "$cmd" == "install" ] || [ "$cmd" == "i" ]; then
    echo "${GREEN}Select the framework you want to use:${NC}"
    options=("Keep as it is" "Skeleton (just a phpinfo page)" "Laravel" "Wordpress" "Reveal.js")
    select_option "${options[@]}"
    FW=$?
    if [ ! "$FW" == "0" ]; then
        if [ -f ./.docker/framework ]; then
            confirm
            stop_if_up
            rm -rf ./.docker
        fi
        find -mindepth 1 -maxdepth 1 ! -name .git -exec rm -rf {} +
    fi
    mkdir -p ./.docker
    touch ./.docker/framework
    start_if_down
    if [ "$FW" == "1" ]; then
        write_skeleton_index
        echo skeleton > ./.docker/framework
    fi
    if [ "$FW" == "2" ]; then
        get_mysql_version
        get_php_version
        ${EXEC} composer global require laravel/installer
        if [ "$MYSQL_VERSION" == "Persistent" ] || [ "$MYSQL_VERSION" == "Temporary" ]; then
            ${EXEC} /home/dev/.config/composer/vendor/bin/laravel new --database mysql lv_temp
        else
            ${EXEC} /home/dev/.config/composer/vendor/bin/laravel new --database sqlite lv_temp
        fi
        if [ ! -d lv_temp ]; then
            stop_if_up
            echo "${RED}Installation failed. Try again.${NC}"
            exit 1
        fi
        move_to_owner lv_temp git
        ${EXEC} sed -i 's/MAIL_HOST=.*/MAIL_HOST=webdev-mailhog/' .env
        ${EXEC} sed -i 's/MAIL_PORT=.*/MAIL_PORT=1025/' .env
        ${EXEC} sed -i 's/MAIL_USERNAME=.*/MAIL_USERNAME=null/' .env
        ${EXEC} sed -i 's/MAIL_PASSWORD=.*/MAIL_PASSWORD=null/' .env
        ${EXEC} sed -i 's/MAIL_ENCRYPTION=.*/MAIL_ENCRYPTION=null/' .env
        ${EXEC} php artisan migrate
        echo laravel > ./.docker/framework
    fi
    if [ "$FW" == "3" ]; then
        get_mysql_version
        if [ "$MYSQL_VERSION" == "None" ]; then
            echo "${RED}Wordpress requires MySQL database${NC}"
            exit
        fi
        ${EXEC} curl https://wordpress.org/latest.tar.gz -L -o latest.tar.gz
        ${EXEC} tar -xzf latest.tar.gz
        ${EXEC} rm latest.tar.gz
        ${EXEC} mv wordpress public
        ${EXEC} cp public/wp-config-sample.php public/wp-config.php
        ${EXEC} sed -i 's/database_name_here/dev/g' public/wp-config.php
        ${EXEC} sed -i 's/username_here/dev/g' public/wp-config.php
        ${EXEC} sed -i 's/password_here/dev/g' public/wp-config.php
        ${EXEC} sed -i 's/localhost/webdev-mysql/g' public/wp-config.php
        for i in {1..10}
        do
            RAND=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32)
            ${EXEC} sed -i '0,/put your unique phrase here/s//'$RAND'/' public/wp-config.php
        done
        echo wordpress > ./.docker/framework
    fi
    if [ "$FW" == "4" ]; then
        ${EXEC} git clone https://github.com/hakimel/reveal.js rv_temp
        move_to_owner rv_temp
        mkdir -p ./public
        mkdir -p ./assets/images
        mkdir -p ./assets/sounds
        mkdir -p ./assets/videos
        ln -s ../index.html ./public/index.php
        ln -s ../dist ./public/dist
        ln -s ../assets ./public/assets
        ln -s ../plugin ./public/plugin
        echo reveal.js > ./.docker/framework
    fi
    stop_if_up
    start_if_down
elif [ "$cmd" == "php" ] || [ "$cmd" == "p" ]; then
    if [ ! -f ./.docker/php/version ]; then
        echo "${RED}Not installed yet${NC}"
        echo "Please run at least one time"
        exit 1
    fi
    get_php_version
    echo "Current PHP version: ${YELLOW}${PHP_VERSION}${NC}"
    echo -n "Do you want to change? [y/n] "
    read -n 1 YN
    echo
    if [ "$YN" == "y" ] || [ "$YN" == "Y" ]; then
        rm ./.docker/php/version
        $0 up
    fi
elif [ "$cmd" == "mysql" ] || [ "$cmd" == "m" ]; then
    if [ ! -f ./.docker/mysql ]; then
        echo "${RED}Not installed yet${NC}"
        echo "Please run at least one time"
        exit 1
    fi
    get_mysql_version
    echo "Current MySQL type: ${YELLOW}${MYSQL_VERSION}${NC}"
    echo -n "Do you want to change? [y/n] "
    read -n 1 YN
    echo
    if [ "$YN" == "y" ] || [ "$YN" == "Y" ]; then
        rm ./.docker/mysql
        $0 up
    fi
elif [ "$cmd" == "run" ] || [ "$cmd" == "r" ]; then
    FRAMEWORK=$(cat ./.docker/framework)
    if [ "$FRAMEWORK" == "laravel" ]; then
        start_if_down
        ${EXEC} php artisan migrate
        if [ -d ./node_modules/vite ]; then
            ${EXEC} npm run dev -- --host
        fi
    else
        echo "${RED}No runable framework installed!${NC}"
        exit 1
    fi
elif [ "$cmd" == "build" ] || [ "$cmd" == "b" ]; then
    FRAMEWORK=$(cat ./.docker/framework)
    if [ "$FRAMEWORK" == "laravel" ]; then
        start_if_down
        ${EXEC} php artisan migrate
        if [ -d ./node_modules/vite ]; then
            ${EXEC} npm run build
        fi
    elif [ "$FRAMEWORK" == "reveal.js" ]; then
        start_if_down
        ${EXEC} npm install
        ${EXEC} gulp build
    else
        echo "${RED}No buildable framework installed!${NC}"
        exit 1
    fi
elif [ "$cmd" == "test" ] || [ "$cmd" == "t" ]; then
    FRAMEWORK=$(cat ./.docker/framework)
    if [ "$FRAMEWORK" == "laravel" ]; then
        start_if_down
        ${EXEC} php artisan test
    else
        echo "${RED}No Laravel framework installed!${NC}"
        exit 1
    fi
elif [ "$cmd" == "export" ] || [ "$cmd" == "x" ]; then
    FRAMEWORK=$(cat ./.docker/framework)
    if [ "$FRAMEWORK" == "reveal.js" ]; then
        start_if_down
        if [ -f ./presentation.zip ]; then
            rm ./presentation.zip
        fi
        ${EXEC} zip -9 -r ./presentation.zip ./index.html ./dist ./assets ./plugin
    else
        echo "${RED}No exportable framework installed!${NC}"
        exit 1
    fi
elif [ "$cmd" == "format" ] || [ "$cmd" == "f" ]; then
    if [ ! -f ./vendor/bin/php-cs-fixer ]; then
        echo "${YELLOW}PHP CS Fixer not found${NC}"
        echo -n "Do you want to install PHP CS Fixer? [y/n] "
        read -n 1 YN
        echo
        if [ "$YN" == "y" ] || [ "$YN" == "Y" ]; then
            start_if_down
            ${EXEC} composer require friendsofphp/php-cs-fixer --dev
        fi
    fi
    if [ ! -f ./vendor/bin/php-cs-fixer ]; then
        echo "${RED}PHP CS Fixer not found${NC}"
        exit 1
    fi
    write_phpcsfixer_file
    start_if_down
    RELPATH=$(realpath --relative-to="$WEBDEV_DIR" "$START_DIR")/
    c_cmd=fix
    c_opts=
    c_files=
    userules=0
    while [ ! "$1" ==  "" ]; do
        if [ "${1:0:7}" == "--rules" ]; then
            userules=1
        fi
        if [ "$1" == "--test" ]; then
            c_cmd=check
        else
            if [ "${1:0:1}" == "-" ]; then
                c_opts=$(echo "$c_opts $1")
            else
                c_files=$(echo "$c_files ${RELPATH}$1")
            fi
        fi
        shift 1
    done

    #if [ "$c_files" == "" ]; then
    #    c_files=$RELPATH
    #fi

    if [ "$userules" == "1" ]; then
        ${EXEC} ./vendor/bin/php-cs-fixer $c_cmd --verbose $c_opts $c_files
    else
        ${EXEC} ./vendor/bin/php-cs-fixer $c_cmd --verbose --config ./.php-cs-fixer.dist.php $c_opts $c_files
    fi
elif [ "$cmd" == "bo" ]; then
    start_if_down
    $0 build
    $0 open
elif [ "$cmd" == "ro" ]; then
    start_if_down
    sleep 10 && $0 open &
    $0 run
elif [ "$cmd" == "remove" ]; then
    echo "${YELLOW}Webdev data (including database) will be removed${NC}"
    echo "All other project data will not be touched"
    echo -n "Are you sure? [y/n] "
    read -n 1 YN
    echo
    if [ "$YN" == 'y' ] || [ "$YN" == 'Y' ]; then
        $0 down
        rm -rf .docker
        rm -f .vscode/launch.json
        rmdir --ignore-fail-on-non-empty .vscode
        rm -f docker-compose.yml
        rm -f .php-cs-fixer.cache
    fi
elif [ "$cmd" == "cleanup" ]; then
    echo "${YELLOW}All docker containers and images will be removed from system${NC}"
    echo -n "Are you sure? [y/n] "
    read -n 1 YN
    echo
    if [ "$YN" == 'y' ] || [ "$YN" == 'Y' ]; then
        $0 down
        remove_docker_images mariadb
        remove_docker_images local.php
        remove_docker_images mailhog
        $DOCKER volume prune -f
        $DOCKER system prune -f

    fi
else
    start_if_down
    ${EXEC} $@
fi


